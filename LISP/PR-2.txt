;---------------------------------------------------------------------------
;EJERCICIO 1
;---------------------------------------------------------------------------

(defun rango (M N)
    (cond
        (
            (and (integerp M) (integerp N)) ;Si M y N son enteros
                (cond
                    (
            			(< M N) ;Si M es menor a N
            				(write M)
            				(write-char #\Space)
            				(rango (+ M 1) N)
                    )
                    (
            			(= M N) ;Si M y N son iguales
            				(write N)
                    )
                    (
                        (> M N) ;Si M es mayor a N
                            (write "ERROR: El primer elemento debe ser menor o igual al segundo.")
                    )
                    (
                        T
                            ()
                    )
                )
        )
        (
			T ;Si M y/o N no son enteros
				(write "ERROR: Los valores ingresados no son ambos numeros enteros.")
        )
    )
)
(rango 2 6)

;---------------------------------------------------------------------------
;EJERCICIO 2
;---------------------------------------------------------------------------

(defun ordenarl (L)
    (cond
        (
            (listp L)
                (setq Menor (car L))
                (cond
                    (
                        (null L) ;Si L esta vacia
                            ()
                    )
                    (
            			T ;Caso contrario
            				(loop for X in L do ;Para cada elemento (lista) X de la lista L
            					(cond
            						(
            							(> (list-length Menor) (list-length X))
            								(setq Menor X)
            						)
            						(
            							(< (list-length Menor) (list-length X))
            								()
            						)
            						(
            							(= (list-length Menor) (list-length X))
            								()
            						)
            						(
            							T
            								()
            						)
            					)
            				)
            				(write Menor)
            				(ordenarl (remove Menor L))
                    )
                )
        )
        (
			T
				(write "ERROR: El valor ingresado no es una lista")
        )
    )
)
(ordenarl '((a b c) (d e) (f g h) (i j k l) (m)))

;---------------------------------------------------------------------------
;EJERCICIO 3
;---------------------------------------------------------------------------

(defun partes (S)
    (cond
        (
            (listp S)
                (cond
                    (
                        (null S) ;Si S esta vacia
                            '(()) ;No hay nada que poner, retorno una lista vacia.
                    )
                    (
                        T ;Caso contrario
                            (combinar (car S) (partes (cdr S)))
                    )
                )
        )
        (
            T
                (write "ERROR: El valor ingresado no es una lista")
        )
    )
)

(defun combinar (X S)
    (cond
        (
            (null S) ;Si S esta vacia
                () ;No agrego nada a ninguna lista.
        )
        (
            T ;Caso contrario
                (cons (car S) (cons (cons X (car S)) (combinar X (cdr S))))
        )
    )
)
(write (partes '(1 2 3)))


;--------
;Resolucion alternativa en caso de que la otra no sea valida

(defun partes (S) ;Variante 1
    (cond
        (
            (listp S)
                (cond
                    (
                        (null S) ;Si S esta vacia
                            () ;No hay nada que poner, retorno una lista vacia.
                    )
                    (
                        T ;Caso contrario
                            (print S)
                            (setq Primer (car S))
                            (setq Saux (cdr S))
                            (loop for X in Saux do ;Para cada elemento X de la lista S
            					(print (cons Primer (partes (remove Primer S))))
            				)
                    )
                )
        )
        (
            T
                (write "ERROR: El valor ingresado no es una lista")
        )
    )
)
(partes '(1 2 3))

(defun partes (S) ;Variante 2
    (cond
        (
            (listp S)
                (cond
                    (
                        (null S) ;Si S esta vacia
                            () ;No hay nada que poner, retorno una lista vacia.
                    )
                    (
                        T ;Caso contrario
                            (print S)
                            (loop for X in S do ;Para cada elemento X de la lista S
                                (print (remove X S))
                                ;(partes (remove X S))
                            )
                    )
                )
        )
        (
            T
                (write "ERROR: El valor ingresado no es una lista")
        )
    )
)
(partes '(1 2 3))